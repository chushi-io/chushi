// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: proto/api/v1/run.proto

package chushi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RunsClient is the client API for Runs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RunsClient interface {
	List(ctx context.Context, in *ListRunsRequest, opts ...grpc.CallOption) (*ListRunsResponse, error)
	Watch(ctx context.Context, in *WatchRunsRequest, opts ...grpc.CallOption) (Runs_WatchClient, error)
	Update(ctx context.Context, in *UpdateRunRequest, opts ...grpc.CallOption) (*Run, error)
}

type runsClient struct {
	cc grpc.ClientConnInterface
}

func NewRunsClient(cc grpc.ClientConnInterface) RunsClient {
	return &runsClient{cc}
}

func (c *runsClient) List(ctx context.Context, in *ListRunsRequest, opts ...grpc.CallOption) (*ListRunsResponse, error) {
	out := new(ListRunsResponse)
	err := c.cc.Invoke(ctx, "/api.v1.Runs/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsClient) Watch(ctx context.Context, in *WatchRunsRequest, opts ...grpc.CallOption) (Runs_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &Runs_ServiceDesc.Streams[0], "/api.v1.Runs/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &runsWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Runs_WatchClient interface {
	Recv() (*Run, error)
	grpc.ClientStream
}

type runsWatchClient struct {
	grpc.ClientStream
}

func (x *runsWatchClient) Recv() (*Run, error) {
	m := new(Run)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *runsClient) Update(ctx context.Context, in *UpdateRunRequest, opts ...grpc.CallOption) (*Run, error) {
	out := new(Run)
	err := c.cc.Invoke(ctx, "/api.v1.Runs/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunsServer is the server API for Runs service.
// All implementations must embed UnimplementedRunsServer
// for forward compatibility
type RunsServer interface {
	List(context.Context, *ListRunsRequest) (*ListRunsResponse, error)
	Watch(*WatchRunsRequest, Runs_WatchServer) error
	Update(context.Context, *UpdateRunRequest) (*Run, error)
	mustEmbedUnimplementedRunsServer()
}

// UnimplementedRunsServer must be embedded to have forward compatible implementations.
type UnimplementedRunsServer struct {
}

func (UnimplementedRunsServer) List(context.Context, *ListRunsRequest) (*ListRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedRunsServer) Watch(*WatchRunsRequest, Runs_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedRunsServer) Update(context.Context, *UpdateRunRequest) (*Run, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRunsServer) mustEmbedUnimplementedRunsServer() {}

// UnsafeRunsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RunsServer will
// result in compilation errors.
type UnsafeRunsServer interface {
	mustEmbedUnimplementedRunsServer()
}

func RegisterRunsServer(s grpc.ServiceRegistrar, srv RunsServer) {
	s.RegisterService(&Runs_ServiceDesc, srv)
}

func _Runs_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Runs/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsServer).List(ctx, req.(*ListRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runs_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRunsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RunsServer).Watch(m, &runsWatchServer{stream})
}

type Runs_WatchServer interface {
	Send(*Run) error
	grpc.ServerStream
}

type runsWatchServer struct {
	grpc.ServerStream
}

func (x *runsWatchServer) Send(m *Run) error {
	return x.ServerStream.SendMsg(m)
}

func _Runs_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Runs/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsServer).Update(ctx, req.(*UpdateRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Runs_ServiceDesc is the grpc.ServiceDesc for Runs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Runs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.Runs",
	HandlerType: (*RunsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Runs_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Runs_Update_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _Runs_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/api/v1/run.proto",
}
