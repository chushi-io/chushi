// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: organizations.sql

package model

import (
	"context"

	"github.com/google/uuid"
)

const createOrganization = `-- name: CreateOrganization :one
INSERT INTO organizations (
  name, type
) VALUES (
  $1, $2
) RETURNING id, created_at, updated_at, deleted_at, name, allow_auto_create_workspace, type, default_agent_id
`

type CreateOrganizationParams struct {
	Name *string
	Type *string
}

func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) (Organization, error) {
	row := q.db.QueryRow(ctx, createOrganization, arg.Name, arg.Type)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
		&i.AllowAutoCreateWorkspace,
		&i.Type,
		&i.DefaultAgentID,
	)
	return i, err
}

const getOrganization = `-- name: GetOrganization :one
SELECT id, created_at, updated_at, deleted_at, name, allow_auto_create_workspace, type, default_agent_id from organizations
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrganization(ctx context.Context, id uuid.UUID) (Organization, error) {
	row := q.db.QueryRow(ctx, getOrganization, id)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
		&i.AllowAutoCreateWorkspace,
		&i.Type,
		&i.DefaultAgentID,
	)
	return i, err
}

const setOrganizationAgent = `-- name: SetOrganizationAgent :exec
UPDATE organizations
SET default_agent_id = $1
WHERE id = $2
`

type SetOrganizationAgentParams struct {
	DefaultAgentID *string
	ID             uuid.UUID
}

func (q *Queries) SetOrganizationAgent(ctx context.Context, arg SetOrganizationAgentParams) error {
	_, err := q.db.Exec(ctx, setOrganizationAgent, arg.DefaultAgentID, arg.ID)
	return err
}
