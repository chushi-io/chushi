// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: workspaces.sql

package model

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createWorkspace = `-- name: CreateWorkspace :one
INSERT INTO workspaces (
  name, allow_destroy, auto_apply, auto_destroy_at, execution_mode,
  vcs_source, vcs_branch, vcs_patterns, vcs_working_directory,
  version, organization_id, agent_id, drift_detection_enabled,
  drift_detection_schedule, vcs_connection_id
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15
) RETURNING id, created_at, updated_at, deleted_at, name, allow_destroy, auto_apply, auto_destroy_at, execution_mode, vcs_source, vcs_branch, vcs_patterns, vcs_prefixes, vcs_working_directory, version, locked, lock_by, lock_at, lock_id, organization_id, agent_id, drift_detection_enabled, drift_detection_schedule, vcs_connection_id
`

type CreateWorkspaceParams struct {
	Name                   *string
	AllowDestroy           *bool
	AutoApply              *bool
	AutoDestroyAt          pgtype.Timestamptz
	ExecutionMode          *string
	VcsSource              *string
	VcsBranch              *string
	VcsPatterns            *string
	VcsWorkingDirectory    *string
	Version                *string
	OrganizationID         pgtype.UUID
	AgentID                pgtype.UUID
	DriftDetectionEnabled  *bool
	DriftDetectionSchedule *string
	VcsConnectionID        *string
}

func (q *Queries) CreateWorkspace(ctx context.Context, arg CreateWorkspaceParams) (Workspace, error) {
	row := q.db.QueryRow(ctx, createWorkspace,
		arg.Name,
		arg.AllowDestroy,
		arg.AutoApply,
		arg.AutoDestroyAt,
		arg.ExecutionMode,
		arg.VcsSource,
		arg.VcsBranch,
		arg.VcsPatterns,
		arg.VcsWorkingDirectory,
		arg.Version,
		arg.OrganizationID,
		arg.AgentID,
		arg.DriftDetectionEnabled,
		arg.DriftDetectionSchedule,
		arg.VcsConnectionID,
	)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
		&i.AllowDestroy,
		&i.AutoApply,
		&i.AutoDestroyAt,
		&i.ExecutionMode,
		&i.VcsSource,
		&i.VcsBranch,
		&i.VcsPatterns,
		&i.VcsPrefixes,
		&i.VcsWorkingDirectory,
		&i.Version,
		&i.Locked,
		&i.LockBy,
		&i.LockAt,
		&i.LockID,
		&i.OrganizationID,
		&i.AgentID,
		&i.DriftDetectionEnabled,
		&i.DriftDetectionSchedule,
		&i.VcsConnectionID,
	)
	return i, err
}

const getWorkspace = `-- name: GetWorkspace :one
SELECT id, created_at, updated_at, deleted_at, name, allow_destroy, auto_apply, auto_destroy_at, execution_mode, vcs_source, vcs_branch, vcs_patterns, vcs_prefixes, vcs_working_directory, version, locked, lock_by, lock_at, lock_id, organization_id, agent_id, drift_detection_enabled, drift_detection_schedule, vcs_connection_id FROM workspaces
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetWorkspace(ctx context.Context, id uuid.UUID) (Workspace, error) {
	row := q.db.QueryRow(ctx, getWorkspace, id)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
		&i.AllowDestroy,
		&i.AutoApply,
		&i.AutoDestroyAt,
		&i.ExecutionMode,
		&i.VcsSource,
		&i.VcsBranch,
		&i.VcsPatterns,
		&i.VcsPrefixes,
		&i.VcsWorkingDirectory,
		&i.Version,
		&i.Locked,
		&i.LockBy,
		&i.LockAt,
		&i.LockID,
		&i.OrganizationID,
		&i.AgentID,
		&i.DriftDetectionEnabled,
		&i.DriftDetectionSchedule,
		&i.VcsConnectionID,
	)
	return i, err
}

const listWorkspaces = `-- name: ListWorkspaces :many
SELECT id, created_at, updated_at, deleted_at, name, allow_destroy, auto_apply, auto_destroy_at, execution_mode, vcs_source, vcs_branch, vcs_patterns, vcs_prefixes, vcs_working_directory, version, locked, lock_by, lock_at, lock_id, organization_id, agent_id, drift_detection_enabled, drift_detection_schedule, vcs_connection_id FROM workspaces
WHERE organization_id = $1
`

func (q *Queries) ListWorkspaces(ctx context.Context, organizationID pgtype.UUID) ([]Workspace, error) {
	rows, err := q.db.Query(ctx, listWorkspaces, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Workspace
	for rows.Next() {
		var i Workspace
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Name,
			&i.AllowDestroy,
			&i.AutoApply,
			&i.AutoDestroyAt,
			&i.ExecutionMode,
			&i.VcsSource,
			&i.VcsBranch,
			&i.VcsPatterns,
			&i.VcsPrefixes,
			&i.VcsWorkingDirectory,
			&i.Version,
			&i.Locked,
			&i.LockBy,
			&i.LockAt,
			&i.LockID,
			&i.OrganizationID,
			&i.AgentID,
			&i.DriftDetectionEnabled,
			&i.DriftDetectionSchedule,
			&i.VcsConnectionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const lockWorkspace = `-- name: LockWorkspace :exec
UPDATE workspaces SET
  locked = true,
  lock_at = $1,
  lock_by = $2,
  lock_id = $3
WHERE
  id = $4 and locked = true
`

type LockWorkspaceParams struct {
	LockAt *string
	LockBy *string
	LockID *string
	ID     uuid.UUID
}

func (q *Queries) LockWorkspace(ctx context.Context, arg LockWorkspaceParams) error {
	_, err := q.db.Exec(ctx, lockWorkspace,
		arg.LockAt,
		arg.LockBy,
		arg.LockID,
		arg.ID,
	)
	return err
}
