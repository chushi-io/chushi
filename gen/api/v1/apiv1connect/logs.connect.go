// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/logs.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/chushi-io/chushi/gen/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LogsName is the fully-qualified name of the Logs service.
	LogsName = "api.v1.Logs"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LogsStreamLogsProcedure is the fully-qualified name of the Logs's StreamLogs RPC.
	LogsStreamLogsProcedure = "/api.v1.Logs/StreamLogs"
	// LogsUploadLogsProcedure is the fully-qualified name of the Logs's UploadLogs RPC.
	LogsUploadLogsProcedure = "/api.v1.Logs/UploadLogs"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	logsServiceDescriptor          = v1.File_api_v1_logs_proto.Services().ByName("Logs")
	logsStreamLogsMethodDescriptor = logsServiceDescriptor.Methods().ByName("StreamLogs")
	logsUploadLogsMethodDescriptor = logsServiceDescriptor.Methods().ByName("UploadLogs")
)

// LogsClient is a client for the api.v1.Logs service.
type LogsClient interface {
	StreamLogs(context.Context, *connect.Request[v1.StreamLogsRequest]) (*connect.Response[v1.StreamLogsResponse], error)
	UploadLogs(context.Context, *connect.Request[v1.UploadLogsRequest]) (*connect.Response[v1.UploadLogsResponse], error)
}

// NewLogsClient constructs a client for the api.v1.Logs service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLogsClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LogsClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &logsClient{
		streamLogs: connect.NewClient[v1.StreamLogsRequest, v1.StreamLogsResponse](
			httpClient,
			baseURL+LogsStreamLogsProcedure,
			connect.WithSchema(logsStreamLogsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		uploadLogs: connect.NewClient[v1.UploadLogsRequest, v1.UploadLogsResponse](
			httpClient,
			baseURL+LogsUploadLogsProcedure,
			connect.WithSchema(logsUploadLogsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// logsClient implements LogsClient.
type logsClient struct {
	streamLogs *connect.Client[v1.StreamLogsRequest, v1.StreamLogsResponse]
	uploadLogs *connect.Client[v1.UploadLogsRequest, v1.UploadLogsResponse]
}

// StreamLogs calls api.v1.Logs.StreamLogs.
func (c *logsClient) StreamLogs(ctx context.Context, req *connect.Request[v1.StreamLogsRequest]) (*connect.Response[v1.StreamLogsResponse], error) {
	return c.streamLogs.CallUnary(ctx, req)
}

// UploadLogs calls api.v1.Logs.UploadLogs.
func (c *logsClient) UploadLogs(ctx context.Context, req *connect.Request[v1.UploadLogsRequest]) (*connect.Response[v1.UploadLogsResponse], error) {
	return c.uploadLogs.CallUnary(ctx, req)
}

// LogsHandler is an implementation of the api.v1.Logs service.
type LogsHandler interface {
	StreamLogs(context.Context, *connect.Request[v1.StreamLogsRequest]) (*connect.Response[v1.StreamLogsResponse], error)
	UploadLogs(context.Context, *connect.Request[v1.UploadLogsRequest]) (*connect.Response[v1.UploadLogsResponse], error)
}

// NewLogsHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLogsHandler(svc LogsHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	logsStreamLogsHandler := connect.NewUnaryHandler(
		LogsStreamLogsProcedure,
		svc.StreamLogs,
		connect.WithSchema(logsStreamLogsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	logsUploadLogsHandler := connect.NewUnaryHandler(
		LogsUploadLogsProcedure,
		svc.UploadLogs,
		connect.WithSchema(logsUploadLogsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.Logs/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LogsStreamLogsProcedure:
			logsStreamLogsHandler.ServeHTTP(w, r)
		case LogsUploadLogsProcedure:
			logsUploadLogsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLogsHandler returns CodeUnimplemented from all methods.
type UnimplementedLogsHandler struct{}

func (UnimplementedLogsHandler) StreamLogs(context.Context, *connect.Request[v1.StreamLogsRequest]) (*connect.Response[v1.StreamLogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.Logs.StreamLogs is not implemented"))
}

func (UnimplementedLogsHandler) UploadLogs(context.Context, *connect.Request[v1.UploadLogsRequest]) (*connect.Response[v1.UploadLogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.Logs.UploadLogs is not implemented"))
}
