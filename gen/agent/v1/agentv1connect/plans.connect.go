// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: agent/v1/plans.proto

package agentv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/chushi-io/chushi/gen/agent/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PlansName is the fully-qualified name of the Plans service.
	PlansName = "agent.v1.Plans"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PlansUploadPlanProcedure is the fully-qualified name of the Plans's UploadPlan RPC.
	PlansUploadPlanProcedure = "/agent.v1.Plans/UploadPlan"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	plansServiceDescriptor          = v1.File_agent_v1_plans_proto.Services().ByName("Plans")
	plansUploadPlanMethodDescriptor = plansServiceDescriptor.Methods().ByName("UploadPlan")
)

// PlansClient is a client for the agent.v1.Plans service.
type PlansClient interface {
	UploadPlan(context.Context, *connect.Request[v1.UploadPlanRequest]) (*connect.Response[v1.UploadPlanResponse], error)
}

// NewPlansClient constructs a client for the agent.v1.Plans service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPlansClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PlansClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &plansClient{
		uploadPlan: connect.NewClient[v1.UploadPlanRequest, v1.UploadPlanResponse](
			httpClient,
			baseURL+PlansUploadPlanProcedure,
			connect.WithSchema(plansUploadPlanMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// plansClient implements PlansClient.
type plansClient struct {
	uploadPlan *connect.Client[v1.UploadPlanRequest, v1.UploadPlanResponse]
}

// UploadPlan calls agent.v1.Plans.UploadPlan.
func (c *plansClient) UploadPlan(ctx context.Context, req *connect.Request[v1.UploadPlanRequest]) (*connect.Response[v1.UploadPlanResponse], error) {
	return c.uploadPlan.CallUnary(ctx, req)
}

// PlansHandler is an implementation of the agent.v1.Plans service.
type PlansHandler interface {
	UploadPlan(context.Context, *connect.Request[v1.UploadPlanRequest]) (*connect.Response[v1.UploadPlanResponse], error)
}

// NewPlansHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPlansHandler(svc PlansHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	plansUploadPlanHandler := connect.NewUnaryHandler(
		PlansUploadPlanProcedure,
		svc.UploadPlan,
		connect.WithSchema(plansUploadPlanMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/agent.v1.Plans/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PlansUploadPlanProcedure:
			plansUploadPlanHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPlansHandler returns CodeUnimplemented from all methods.
type UnimplementedPlansHandler struct{}

func (UnimplementedPlansHandler) UploadPlan(context.Context, *connect.Request[v1.UploadPlanRequest]) (*connect.Response[v1.UploadPlanResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("agent.v1.Plans.UploadPlan is not implemented"))
}
