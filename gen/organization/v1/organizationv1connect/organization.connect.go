// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: organization/v1/organization.proto

package organizationv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/chushi-io/chushi/gen/organization/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OrganizationsName is the fully-qualified name of the Organizations service.
	OrganizationsName = "organization.v1.Organizations"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OrganizationsCreateProcedure is the fully-qualified name of the Organizations's Create RPC.
	OrganizationsCreateProcedure = "/organization.v1.Organizations/Create"
	// OrganizationsGetProcedure is the fully-qualified name of the Organizations's Get RPC.
	OrganizationsGetProcedure = "/organization.v1.Organizations/Get"
	// OrganizationsSetAgentProcedure is the fully-qualified name of the Organizations's SetAgent RPC.
	OrganizationsSetAgentProcedure = "/organization.v1.Organizations/SetAgent"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	organizationsServiceDescriptor        = v1.File_organization_v1_organization_proto.Services().ByName("Organizations")
	organizationsCreateMethodDescriptor   = organizationsServiceDescriptor.Methods().ByName("Create")
	organizationsGetMethodDescriptor      = organizationsServiceDescriptor.Methods().ByName("Get")
	organizationsSetAgentMethodDescriptor = organizationsServiceDescriptor.Methods().ByName("SetAgent")
)

// OrganizationsClient is a client for the organization.v1.Organizations service.
type OrganizationsClient interface {
	Create(context.Context, *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.Organization], error)
	Get(context.Context, *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.Organization], error)
	SetAgent(context.Context, *connect.Request[v1.SetOrganizationAgentRequest]) (*connect.Response[v1.Organization], error)
}

// NewOrganizationsClient constructs a client for the organization.v1.Organizations service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOrganizationsClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OrganizationsClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &organizationsClient{
		create: connect.NewClient[v1.CreateOrganizationRequest, v1.Organization](
			httpClient,
			baseURL+OrganizationsCreateProcedure,
			connect.WithSchema(organizationsCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[v1.GetOrganizationRequest, v1.Organization](
			httpClient,
			baseURL+OrganizationsGetProcedure,
			connect.WithSchema(organizationsGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setAgent: connect.NewClient[v1.SetOrganizationAgentRequest, v1.Organization](
			httpClient,
			baseURL+OrganizationsSetAgentProcedure,
			connect.WithSchema(organizationsSetAgentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// organizationsClient implements OrganizationsClient.
type organizationsClient struct {
	create   *connect.Client[v1.CreateOrganizationRequest, v1.Organization]
	get      *connect.Client[v1.GetOrganizationRequest, v1.Organization]
	setAgent *connect.Client[v1.SetOrganizationAgentRequest, v1.Organization]
}

// Create calls organization.v1.Organizations.Create.
func (c *organizationsClient) Create(ctx context.Context, req *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.Organization], error) {
	return c.create.CallUnary(ctx, req)
}

// Get calls organization.v1.Organizations.Get.
func (c *organizationsClient) Get(ctx context.Context, req *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.Organization], error) {
	return c.get.CallUnary(ctx, req)
}

// SetAgent calls organization.v1.Organizations.SetAgent.
func (c *organizationsClient) SetAgent(ctx context.Context, req *connect.Request[v1.SetOrganizationAgentRequest]) (*connect.Response[v1.Organization], error) {
	return c.setAgent.CallUnary(ctx, req)
}

// OrganizationsHandler is an implementation of the organization.v1.Organizations service.
type OrganizationsHandler interface {
	Create(context.Context, *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.Organization], error)
	Get(context.Context, *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.Organization], error)
	SetAgent(context.Context, *connect.Request[v1.SetOrganizationAgentRequest]) (*connect.Response[v1.Organization], error)
}

// NewOrganizationsHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOrganizationsHandler(svc OrganizationsHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	organizationsCreateHandler := connect.NewUnaryHandler(
		OrganizationsCreateProcedure,
		svc.Create,
		connect.WithSchema(organizationsCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	organizationsGetHandler := connect.NewUnaryHandler(
		OrganizationsGetProcedure,
		svc.Get,
		connect.WithSchema(organizationsGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	organizationsSetAgentHandler := connect.NewUnaryHandler(
		OrganizationsSetAgentProcedure,
		svc.SetAgent,
		connect.WithSchema(organizationsSetAgentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/organization.v1.Organizations/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OrganizationsCreateProcedure:
			organizationsCreateHandler.ServeHTTP(w, r)
		case OrganizationsGetProcedure:
			organizationsGetHandler.ServeHTTP(w, r)
		case OrganizationsSetAgentProcedure:
			organizationsSetAgentHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOrganizationsHandler returns CodeUnimplemented from all methods.
type UnimplementedOrganizationsHandler struct{}

func (UnimplementedOrganizationsHandler) Create(context.Context, *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.Organization], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("organization.v1.Organizations.Create is not implemented"))
}

func (UnimplementedOrganizationsHandler) Get(context.Context, *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.Organization], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("organization.v1.Organizations.Get is not implemented"))
}

func (UnimplementedOrganizationsHandler) SetAgent(context.Context, *connect.Request[v1.SetOrganizationAgentRequest]) (*connect.Response[v1.Organization], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("organization.v1.Organizations.SetAgent is not implemented"))
}
